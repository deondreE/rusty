#pragma once#include <chrono>#include <source_location>#include "profiler/ProfilerRegistry.hpp"namespace profiler {class AutoProfileScope {public:    explicit AutoProfileScope(    std::string_view label = {},    const std::source_location& loc = std::source_location::current()) noexcept        : _start(std::chrono::steady_clock::now()),          _label(label),          _loc(loc) {}    ~AutoProfileScope() noexcept    {        using namespace std::chrono;        const auto end = steady_clock::now();        const double ms = duration_cast<microseconds>(end - _start).count() / 1000.0;        if (!_label.empty()) {            ProfilerRegistry::instance().record(_label,ms);        } else {            ProfilerRegistry::instance().record(_loc.function_name(), ms);        }    }    AutoProfileScope(const AutoProfileScope&) = delete;    AutoProfileScope& operator=(const AutoProfileScope&) = delete;private:    std::chrono::steady_clock::time_point _start;    std::string _label;    const std::source_location& _loc;};}